-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-04-06 14:58:27 MSK
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE accident (
    link             VARCHAR2(70 CHAR) NOT NULL,
    count            INTEGER NOT NULL,
    dateofaccident   DATE,
    client_client_id NUMBER
);

COMMENT ON COLUMN accident.link IS
    'The customer needs to keep the sources from where the customer''s accident history came from';

COMMENT ON COLUMN accident.count IS
    'This is count of accidents in quantitative terms';

COMMENT ON COLUMN accident.dateofaccident IS
    'Shows the date of the last accident';

CREATE TABLE car (
    carnumber                VARCHAR2(10) NOT NULL,
    release                  DATE,
    car_id                   NUMBER NOT NULL,
    client_client_id         NUMBER NOT NULL,
    typeofrent_typeofrent_id NUMBER NOT NULL,
    model_model_id           NUMBER NOT NULL,
    location_location_id     NUMBER NOT NULL
);

COMMENT ON COLUMN car.release IS
    'Year of release';

ALTER TABLE car ADD CONSTRAINT car_pk PRIMARY KEY ( car_id );

CREATE TABLE client (
    passportdata VARCHAR2 
--  ERROR: VARCHAR2 size not specified 
     NOT NULL,
    name         VARCHAR2 
--  ERROR: VARCHAR2 size not specified 
     NOT NULL,
    surname      VARCHAR2 
--  ERROR: VARCHAR2 size not specified 
    ,
    client_id    NUMBER NOT NULL
);

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( client_id );

CREATE TABLE driverlicense (
    licencenumber    VARCHAR2(15) NOT NULL,
    driverlicense_id NUMBER NOT NULL,
    client_client_id NUMBER
);

COMMENT ON COLUMN driverlicense.licencenumber IS
    'The number of licence';

ALTER TABLE driverlicense ADD CONSTRAINT driverlicense_pk PRIMARY KEY ( driverlicense_id );

CREATE TABLE feedback (
    rate             INTEGER NOT NULL,
    "Comment"        VARCHAR2(500),
    client_client_id NUMBER NOT NULL
);

CREATE TABLE latestdriverlicence (
    dateofchange                   DATE NOT NULL,
    licencenumber                  VARCHAR2(15),
    driverlicense_driverlicense_id NUMBER NOT NULL
);

CREATE TABLE location (
    region         VARCHAR2(15) NOT NULL,
    street         VARCHAR2(20),
    numberofstreet VARCHAR2(5),
    location_id    NUMBER NOT NULL
);

ALTER TABLE location ADD CONSTRAINT location_pk PRIMARY KEY ( location_id );

CREATE TABLE model (
    model        VARCHAR2(15) NOT NULL,
    manufacturer VARCHAR2(15) NOT NULL,
    engine_power FLOAT NOT NULL,
    model_id     NUMBER NOT NULL
);

ALTER TABLE model ADD CONSTRAINT model_pk PRIMARY KEY ( model_id );

CREATE TABLE servicehistory (
    mileage     FLOAT NOT NULL,
    lastservice DATE NOT NULL,
    car_car_id  NUMBER NOT NULL
);

CREATE TABLE typeofrent (
    currency      VARCHAR2(10),
    cost          FLOAT NOT NULL,
    starttime     DATE NOT NULL,
    endtime       DATE,
    type          CHAR(1),
    typeofrent_id NUMBER NOT NULL
);

COMMENT ON COLUMN typeofrent.type IS
    'The Type of Rent';

ALTER TABLE typeofrent ADD CONSTRAINT typeofrent_pk PRIMARY KEY ( typeofrent_id );

ALTER TABLE accident
    ADD CONSTRAINT accident_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

ALTER TABLE car
    ADD CONSTRAINT car_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

ALTER TABLE car
    ADD CONSTRAINT car_location_fk FOREIGN KEY ( location_location_id )
        REFERENCES location ( location_id );

ALTER TABLE car
    ADD CONSTRAINT car_model_fk FOREIGN KEY ( model_model_id )
        REFERENCES model ( model_id );

ALTER TABLE car
    ADD CONSTRAINT car_typeofrent_fk FOREIGN KEY ( typeofrent_typeofrent_id )
        REFERENCES typeofrent ( typeofrent_id );

ALTER TABLE driverlicense
    ADD CONSTRAINT driverlicense_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

ALTER TABLE feedback
    ADD CONSTRAINT feedback_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE latestdriverlicence
    ADD CONSTRAINT latestdriverlicence_driverlicense_fk FOREIGN KEY ( driverlicense_driverlicense_id )
        REFERENCES driverlicense ( driverlicense_id );

ALTER TABLE servicehistory
    ADD CONSTRAINT servicehistory_car_fk FOREIGN KEY ( car_car_id )
        REFERENCES car ( car_id );

CREATE SEQUENCE car_car_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER car_car_id_trg BEFORE
    INSERT ON car
    FOR EACH ROW
    WHEN ( new.car_id IS NULL )
BEGIN
    :new.car_id := car_car_id_seq.nextval;
END;
/

CREATE SEQUENCE client_client_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_client_id_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.client_id IS NULL )
BEGIN
    :new.client_id := client_client_id_seq.nextval;
END;
/

CREATE SEQUENCE driverlicense_driverlicense_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER driverlicense_driverlicense_id BEFORE
    INSERT ON driverlicense
    FOR EACH ROW
    WHEN ( new.driverlicense_id IS NULL )
BEGIN
    :new.driverlicense_id := driverlicense_driverlicense_id.nextval;
END;
/

CREATE SEQUENCE location_location_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER location_location_id_trg BEFORE
    INSERT ON location
    FOR EACH ROW
    WHEN ( new.location_id IS NULL )
BEGIN
    :new.location_id := location_location_id_seq.nextval;
END;
/

CREATE SEQUENCE model_model_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER model_model_id_trg BEFORE
    INSERT ON model
    FOR EACH ROW
    WHEN ( new.model_id IS NULL )
BEGIN
    :new.model_id := model_model_id_seq.nextval;
END;
/

CREATE SEQUENCE typeofrent_typeofrent_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER typeofrent_typeofrent_id_trg BEFORE
    INSERT ON typeofrent
    FOR EACH ROW
    WHEN ( new.typeofrent_id IS NULL )
BEGIN
    :new.typeofrent_id := typeofrent_typeofrent_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            10
-- CREATE INDEX                             0
-- ALTER TABLE                             15
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          6
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   4
-- WARNINGS                                 0
